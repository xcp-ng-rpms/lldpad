From 214f2d28960eb91a52a6d5642602ece47928cf3d Mon Sep 17 00:00:00 2001
From: Ross Lagerwall <ross.lagerwall@citrix.com>
Date: Tue, 7 Mar 2023 11:25:53 +0000
Subject: [PATCH] dcbx: Fix NULL pointer dereference

A TLV with type == 0 followed a TLV with type == 1 results in
clear_dcbx_manifest() being called twice without a manifest allocation
in between. This results in a NULL pointer dereference accessing
manifest. Fix by checking for this in clear_dcbx_manifest().

At the same time, unify clear_dcbx_manifest() and dcbx_free_manifest()
since they are basically the same and make clear_dcbx_manifest() static.

Fixes: 2e442f996958 ("dcbx: Free manifest in rchange callback")
Signed-off-by: Ross Lagerwall <ross.lagerwall@citrix.com>
Signed-off-by: Aaron Conole <aconole@redhat.com>
---
 lldp_dcbx.c | 32 +++++---------------------------
 1 file changed, 5 insertions(+), 27 deletions(-)

diff --git a/lldp_dcbx.c b/lldp_dcbx.c
index 8aa9004..dad89ad 100644
--- a/lldp_dcbx.c
+++ b/lldp_dcbx.c
@@ -57,6 +57,7 @@ extern u8 gdcbx_subtype;
 
 void dcbx_free_tlv(struct dcbx_tlvs *tlvs);
 static int dcbx_check_operstate(struct port *port, struct lldp_agent *agent);
+static void clear_dcbx_manifest(struct dcbx_tlvs *dcbx);
 
 const struct lldp_mod_ops dcbx_ops = {
 	.lldp_mod_register	= dcbx_register,
@@ -277,29 +278,6 @@ fail_add:
 	return -1;
 }
 
-void dcbx_free_manifest(struct dcbx_manifest *manifest)
-{
-	if (!manifest)
-		return;
-
-	if (manifest->dcbx1)
-		manifest->dcbx1 = free_unpkd_tlv(manifest->dcbx1);
-	if (manifest->dcbx2)
-		manifest->dcbx2 = free_unpkd_tlv(manifest->dcbx2);
-	if (manifest->dcbx_ctrl)
-		manifest->dcbx_ctrl = free_unpkd_tlv(manifest->dcbx_ctrl);
-	if (manifest->dcbx_pg)
-		manifest->dcbx_pg = free_unpkd_tlv(manifest->dcbx_pg);
-	if (manifest->dcbx_pfc)
-		manifest->dcbx_pfc = free_unpkd_tlv(manifest->dcbx_pfc);
-	if (manifest->dcbx_app)
-		manifest->dcbx_app = free_unpkd_tlv(manifest->dcbx_app);
-	if (manifest->dcbx_llink)
-		manifest->dcbx_llink = free_unpkd_tlv(manifest->dcbx_llink);
-
-	return;
-}
-
 void dcbx_free_tlv(struct dcbx_tlvs *tlvs)
 {
 	if (!tlvs)
@@ -385,8 +363,7 @@ static void dcbx_free_data(struct dcbd_user_data *dud)
 			dd = LIST_FIRST(&dud->head);
 			LIST_REMOVE(dd, entry);
 			dcbx_free_tlv(dd);
-			dcbx_free_manifest(dd->manifest);
-			free(dd->manifest);
+			clear_dcbx_manifest(dd);
 			free(dd);
 		}
 	}
@@ -654,14 +631,13 @@ void dcbx_ifdown(char *device_name, struct lldp_agent *agent)
 
 	LIST_REMOVE(tlvs, entry);
 	dcbx_free_tlv(tlvs);
-	dcbx_free_manifest(tlvs->manifest);
-	free(tlvs->manifest);
+	clear_dcbx_manifest(tlvs);
 	free(tlvs);
 }
 
-void clear_dcbx_manifest(struct dcbx_tlvs *dcbx)
+static void clear_dcbx_manifest(struct dcbx_tlvs *dcbx)
 {
-	if (!dcbx)
+	if (!dcbx || !dcbx->manifest)
 		return;
 
 	if (dcbx->manifest->dcbx_llink)
